---
- name: install snapper
  ansible.builtin.dnf:
    name: snapper
    state: present

- name: place root config template
  ansible.builtin.template:
    src: default_root.j2
    dest: /etc/snapper/config-templates/default
    owner: root
    group: root
    mode: 0644
  register: config_update

- name: snapper timers are stopped
  ansible.builtin.systemd:
    name: "{{ item }}.timer"
    state: stopped
  loop: ['snapper-timeline', 'snapper-cleanup']

- name: delete old default configs except root
  ansible.builtin.command: "snapper -c {{ item | trim | basename }} delete-config"
  args:
    removes: "/etc/snapper/configs/{{ item | trim | basename }}"
  loop: "{{ default_subvol_paths }}"
  when: ansible_hostname != 'megalonyx'

- name: delete host special configs from vars
  ansible.builtin.command: "snapper -c {{ item | trim | basename }} delete-config"
  args:
    removes: "/etc/snapper/configs/{{ item | trim | basename }}"
  loop: "{{ host_subvol_paths }}"
  when: ansible_hostname == 'megalonyx'

- name: create new default configs from updated template except root
  ansible.builtin.command: "snapper -c {{ item | trim | basename }} create-config {{ item | trim | quote }}"
  args:
    creates: "{{ item }}/.snapshots"
  loop: "{{ default_subvol_paths }}"
  when: ansible_hostname != 'megalonyx'

- name: create new host special configs from vars
  ansible.builtin.command: "snapper -c {{ item | trim | basename }} create-config {{ item | trim | quote }}"
  args:
    creates: "{{ item }}/.snapshots"
  loop: "{{ host_subvol_paths }}"
  when: ansible_hostname == 'megalonyx'

- name: snapper timers are reloaded and restarted
  ansible.builtin.systemd:
    name: "{{ item }}.timer"
    state: restarted
    daemon_reload: yes
    enabled: yes
  loop: ['snapper-timeline', 'snapper-cleanup']
