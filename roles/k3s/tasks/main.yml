---
- name: NetworkManager shouldnt manage k8s ifaces
  ansible.builtin.copy:
    src: cni.conf
    dest: /etc/NetworkManager/conf.d/cni.conf
    owner: root
    group: root

- name: kernel modules 
  ansible.builtin.copy:
    src: br_nf.conf
    dest: /etc/modules-load.d/br_nf.conf
    owner: root
    group: root

- name: issue modprobe commands
  shell: "modprobe {{ item }}"
  loop:
    - 'br_netfilter'
    - 'overlay'

- name: set sysctls
  sysctl:
    name: "net.ipv4.ip_forward"
    value: "1"
    sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
    sysctl_set: true

- name: restart NetworkManager
  ansible.builtin.systemd:
    name: NetworkManager.service
    state: restarted
    daemon-reload: yes
    enabled: yes

- name: stop and disable firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: stopped
    enabled: no

- name: install selinux stuff
  ansible.builtin.dnf:
    name: ['container-selinux', 'selinux-policy-base']
    state: latest

- name: generate a node token locally
  shell: bw generate -ulnp --words 4 --separator _
  register: token
  delegate_to: localhost
  run_once: true
  become: true
  become_user: "{{ k3s_user }}"

- name: remove old token var
  file:
    path: "{{ role_path }}/vars/token.yml"
    state: absent
  delegate_to: localhost
  run_once: true

- name: encrypt the token string
  ansible.builtin.shell:
    chdir: "/home/{{ k3s_user }}/Ansible"
    cmd: "poetry shell && ansible-vault encrypt_string {{ token.stdout }}"
  register: encrypted_token
  delegate_to: localhost
  run_once: true
  become: true
  become_user: "{{ k3s_user }}"

- name: template token var file
  template:
    src: token.yml.j2
    dest: "{{ role_path }}/vars/token.yml"
    mode: 0640
    owner: "{{ k3s_user }}"
    group: "{{ k3s_user }}"
  delegate_to: localhost
  run_once: true
  become: true
  become_user: "{{ k3s_user }}"

- name: create the directory for kubeconfig on the initial cp node
  file:
    path: "/home/{{ k3s_user }}/.kube"
    state: directory
    owner: "{{ k3s_user }}"
    group: "{{ k3s_user }}"
    mode: 0744

- name: run install script on first server
  ansible.builtin.shell: >
    curl -sfL https://get.k3s.io | K3S_TOKEN={{ token.stdout | trim }} sh -s - server --cluster-init 
    --advertise-address {{ cluster_ip }} --tls-san {{ initial_cp }}.local 
    --tls-san {{ initial_cp }}.{{ cluster_domain }} --tls-san {{ cluster_ip }}
  environment: 
    INSTALL_K3S_CHANNEL: "{{ k3s_channel }}"
    K3S_KUBECONFIG_MODE: "644"
    K3S_KUBECONFIG_OUTPUT: "/home/{{ k3s_user }}/.kube/kubeconfig.yml"
  when: ansible_hostname == initial_cp
  tags: first_cp

- name: run install scripts on additional server nodes
  ansible.builtin.shell: >
    curl -sfL https://get.k3s.io | K3S_TOKEN={{ token.stdout | trim }} sh -s - server
    --server https://{{ cluster_ip }}:6443
  environment: 
    INSTALL_K3S_CHANNEL: "{{ k3s_channel }}"
  when:
    - ansible_hostname != initial_cp
    - '"controlplane" in group_names'
  tags: next_cp 

- name: run install scripts on worker nodes
  ansible.builtin.shell: >
    curl -sfL https://get.k3s.io | K3S_URL=https://{{ cluster_ip }}:6443 K3S_TOKEN={{ token.stdout | trim }} sh -
  environment: 
    INSTALL_K3S_CHANNEL: "{{ k3s_channel }}"
  when: '"worker" in group_names'
  tags: workers

- name: fix the ip in the kubeconfig file
  replace:
    path: "/home/{{ k3s_user }}/.kube/kubeconfig.yml"
    regexp: '127.0.0.1'
    replace: "{{ cluster_ip }}"
    owner: "{{ k3s_user }}"
    group: "{{ k3s_user }}"
    mode: 0644
  when: ansible_hostname == initial_cp

- name: get the kubeconfig file
  fetch:
    src: "/home/{{ k3s_user }}/.kube/kubeconfig.yml"
    dest: "/home/{{ k3s_user }}/Ansible/roles/k3s/files/"
    flat: yes
    owner: "{{ k3s_user }}"
    group: "{{ k3s_user }}"
    mode: 0644
  when: ansible_hostname == initial_cp

- name: encrypt the kubeconfig file on the control host
  shell:
    cmd: poetry shell && ansible-vault encrypt roles/k3s/files/kubeconfig.yml
    chdir: "/home/{{ k3s_user }}/Ansible"
  environment:
    VAULT_PASSWORD_FILE: "/home/{{ k3s_user }}/.ansible_vp"
  become: true
  become_user: "{{ k3s_user }}"
  delegate_to: localhost
  run_once: true

