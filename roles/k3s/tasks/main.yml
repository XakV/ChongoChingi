---
- name: NetworkManager shouldnt manage k8s ifaces
  ansible.builtin.copy:
    src: cni.conf
    dest: /etc/NetworkManager/conf.d/rke2-cni.conf
    owner: root
    group: root

- name: kernel modules 
  ansible.builtin.copy:
    src: br_nf.conf
    dest: /etc/modules-load.d/br_nf.conf
    owner: root
    group: root

- name: issue modprobe commands
  shell: "modprobe {{ item }}"
  loop:
    - 'br_netfilter'
    - 'overlay'

- name: set sysctls
  sysctl:
    name: "net.ipv4.ip_forward"
    value: "1"
    sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
    sysctl_set: true

- name: restart NetworkManager
  ansible.builtin.systemd:
    name: NetworkManager.service
    state: restarted
    daemon-reload: yes
    enabled: yes

- name: stop and disable firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: stopped
    enabled: no

- name: install selinux stuff
  ansible.builtin.dnf:
    name: ['container-selinux', 'selinux-policy-base']
    state: latest

- name: generate a node token locally
  shell: bw generate --ulnp --words 4 --separator _
  register: token
  delegate_to: localhost
  become: true
  become_user: zach

- name: create the directory for kubeconfig on the initial cp node
  file:
    path: "/home/zach/.kube"
    state: directory
    owner: zach
    group: zach
    mode: 0744

- name: run install script on first server
  ansible.builtin.shell: "curl -sfL https://get.k3s.io | K3S_TOKEN={{ token.stdout | strip }} sh -s - server --cluster-init"
  register: initial_cp_up
  environment: 
    INSTALL_K3S_CHANNEL: "latest"
    K3S_KUBECONFIG_MODE: "644"
    K3S_KUBECONFIG_OUTPUT: "/home/zach/.kube/kubeconfig.yml"
  when: 
    - controlplane
    - initial_cp
